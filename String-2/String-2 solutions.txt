Given a string, return a string where for every char in the original, there are two chars.

def double_char(str):
  new_string = ''
  for i in str:
    new_string+=(i*2)
  return new_string
  
*****************************************************************************************************************  
Return the number of times that the string "hi" appears anywhere in the given string.

def count_hi(str):
  count = 0
  for i in range(len(str)-1):
    if str[i] == 'h' and str[i+1] == 'i':
      count+=1
  return count
  
*****************************************************************************************************************
Return True if the string "cat" and "dog" appear the same number of times in the given string.

def cat_dog(str):
  cat_count = 0
  dog_count = 0
  for i in range(len(str)-2):
    if str[i] == 'd' and str[i+1]=='o' and str[i+2]=='g':
      dog_count+=1
    elif str[i] == 'c' and str[i+1]=='a' and str[i+2]=='t':
      cat_count+=1
      
  return dog_count == cat_count
  
*****************************************************************************************************************  
Return the number of times that the string "code" appears anywhere in the given string, except we'll accept any letter for the 'd', so "cope" and "cooe" count.

def count_code(str):
  alphabets = 'abcdefghijklmnopqrstuvwxyz'
  count = 0
  for i in range(len(str)-3):
    if str[i] == 'c' and str[i+1] == 'o' and str[i+2] in alphabets and str[i+3] == 'e':
      count += 1
  return count
  
*****************************************************************************************************************  
Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). Note: s.lower() returns the lowercase version of a string.

def end_other(a, b):
  return a[-len(b):].lower() == b[:].lower() or b[-len(a):].lower() == a[:].lower()
  
*****************************************************************************************************************
Return True if the given string contains an appearance of "xyz" where the xyz is not directly preceeded by a period (.). So "xxyz" counts but "x.xyz" does not.

def xyz_there(str):
  n_str = str.replace(".xyz", "")
  return 'xyz' in n_str
*****************************************************************************************************************  
  

